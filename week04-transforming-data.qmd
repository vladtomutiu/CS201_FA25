---
title: "Analyzing Penguins Data"
author: "Amber Camp & Connor Flynn"
date: 9/15/25
format: html
editor: visual
---

# Transforming Data

## Load Libraries

```{r, message=FALSE}
library(tidyverse) 
library(here)
library(palmerpenguins)
library(janitor)
library(plotly)
```

![](https://allisonhorst.github.io/palmerpenguins/logo.png){width="10%"}

## Read in Data

We'll continue with penguins for now! We'll read the data in and clean up the column names in a single code chunk below.

```{r, message=FALSE}
penguins_data <- read_csv("data/penguins_lter.csv")

penguins_data <- penguins_data %>% 
  clean_names()
```

## Interactive Data Visualization

You got a preview of interactive data visualization in the last file (`week03-penguins-data.qmd`), so let's try another example.

We'll start by recreating the scatter plot of flipper length by body mass with `color = species` and `shape = island`.

```{r, message=FALSE}
mass_by_flipper <- ggplot(data = penguins_data, aes(x = flipper_length_mm, y = body_mass_g, color = species, shape = island)) +
  geom_point() +
  theme_bw() +
  scale_color_viridis_d() +
   labs(title = "Palmer Penguins, Flipper Length & Body Mass",
       x = "Flipper Length (mm)",
       y = "Body Mass (g)")

ggplotly(mass_by_flipper)
```

Let's add one more variable: `sex`. Can you think of a way to add another dimension of information in these visuals?

If you said facets, you're right! Facets help us split a single plot into multiple panels, based on the values of a selected variable. Each panel shows a different “slice” of the data, making it easier to compare patterns across categories.

```{r, message=FALSE, warning=FALSE}
ggplot(data = penguins_data, aes(x = flipper_length_mm, y = body_mass_g, color = species, shape = island)) +
  geom_point() +
  theme_bw() +
  scale_color_viridis_d() +
  facet_wrap(~sex) + # here is where we designate faceting!
   labs(title = "Palmer Penguins, Flipper Length & Body Mass",
       x = "flipper length (mm)",
       y = "body mass (g)")

```

Wait. There appear to be four levels of the variable `sex` here (male, female, ".", and `NA`), when we only expected two.

Confirm that by using the `unique()` function.

```{r, message=FALSE}
unique(penguins_data$sex)
```

-   If we wanted to know the number of penguins in each category for `sex`, we can use `table()`, however this does not include `NA`

    ```{r, message=FALSE}
    table(penguins_data$sex)
    ```

-   We can use the `sum(is.na())` function to count the number of penguins with `NA` as the `sex`

```{r, message=FALSE}
sum(is.na(penguins_data$sex))
```

Let's filter for observations where `sex` is either male or female and drop observations with `NA` in that

```{r, message=FALSE}
penguins_male_female <- penguins_data %>% 
  filter(sex %in% c("MALE", "FEMALE")) %>% 
  drop_na(sex)
```

-   Notice in our environment pane (top right) that our \# of observations went from 344 in the dataframe `penguins_data` to 333 observation in `penguins_male_female`

Let's let's make the same faceted scatter plot from the new dataframe. Can you make it interactive using `plotly`?

```{r, message=FALSE}

ggplot(data = penguins_data, aes(x = flipper_length_mm, y = body_mass_g, color = species, shape = island)) +
  geom_point() +
  theme_bw() +
  scale_color_viridis_d() +
  facet_wrap(~sex) + # here is where we designate faceting!
   labs(title = "Palmer Penguins, Flipper Length & Body Mass",
       x = "flipper length (mm)",
       y = "body mass (g)")
ggplotly()
```

Bonus: Instead of `facet_wrap()`, try using `facet_grid(island ~ sex)`. Now you have a grid layout with `island` on one axis and `sex` on the other.

## Data Manipulation/Transformation

Our first plots did not call for us to manipulate the data at all.

How about if we wanted to make a bar graph of the *average body mass by species*? This is a two step process.

1.  Create a new dataframe called `average_mass` that has the average body mass for each penguin species. Use the `group_by()` and `summarise()` functions.

    ```{r}
    average_mass <- penguins_data %>% 
      group_by(species) %>% 
      summarise(average_body_mass = mean(body_mass_g, na.rm = TRUE))
    ```

2.  Now, create a bar graph using the *new* dataframe you made

    ```{r}
    ggplot(data = average_mass, aes(x = species, y = average_body_mass)) + # fill in the blanks
      geom_bar(stat = "identity") # tells ggplot to use the actual y-values from your data, instead of counting the number of rows like a typical bar plot does
    ```

## Exercise 1

In the code chunk below, create a new dataframe called `average_flipper_length` that has the average flipper length for each species.

Bonus: If you assign this to a new object name, you can then use `view(object_name)` to see your results as a table.

```{r, message=FALSE}
average_flipper_length <- penguins_data %>% 
  group_by(species) %>% 
  summarise(average_flipper_length = mean(flipper_length_mm, na.rm = TRUE))

```

In the code chunk below, plot `average_flipper_length` using `ggplot()` and `geom_bar`. Customize the graph with colors, a theme, and labels, etc., as you wish.

```{r, message=FALSE}
ggplot(data = average_flipper_length, aes(x = species, y = average_flipper_length, fill = species)) + # fill in the blanks
  geom_bar(stat = "identity") +
  theme_bw() +
  coord_flip() +
  theme(legend.position = "none") +
  labs(title = "TITLE", subtitle = "subtitle", x = "", y = "flippy")

```

## Exercise 2

Create a boxplot of body mass by species & make the plot interactive

-   Hints: `geom_boxplot()`, `ggplotly()`

```{r, message=FALSE}
ex2 <- ggplot(data = penguins_data, aes(x = species, y = body_mass_g, fill = species)) +
  geom_boxplot()

ggplotly(ex2)

```

## Exercise 3

How many penguins live on each Island?

-   Hint: There are a few different ways, but you can use `summary()` to start.

```{r, message=FALSE}

summary(as.factor(penguins_data$island))

table(penguins_data$island)

penguins_data %>%
  count(island)
```

## Exercise 4

Create a dataframe that has the average culmen depth for each species. Then, make a bar plot of the new dataframe with species on the x-axis and average culmen depth on the y-axis

```{r, message=FALSE}
average_culmen_depth <- penguins_data %>% 
  group_by(species) %>% 
  summarise(average_culmen_depth = mean(culmen_depth_mm, na.rm = TRUE))

ggplot(data = average_culmen_depth, aes(x = species, y = average_culmen_depth, fill = species)) +
  geom_bar(stat = "identity")

```

## Push to GitHub!

Use the RStudio to commit & push to GitHub. Ask for help if needed!
