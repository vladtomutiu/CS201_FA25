---
title: "Exploratory Data Analysis, part 1"
author: "Amber Camp"
date: "9/22/25"
format: html
editor: visual
---

## Exploratory Data Analysis

This week, we're diving into visualization techniques to help you explore your data in a fun and structured way! Exploratory Data Analysis (or EDA, as some like to call it) is all about getting to know your data better. It’ll help you to explore the quality of your data, ask questions, seek out answers through visualizations, and even inspire more questions based on what you discover.

We'll be practicing some tools/techniques you've already seen and will try a few new things. The final goal for the week will be for you to apply these techniques to your own data set.

## Libraries

```{r, message=FALSE}
library(tidyverse)
library(here)
library(janitor)
```

## Data

Read in the data and clean the column headers using janitor.

```{r, message=FALSE}
pokedata <- read_csv(here("Pokemon.csv"))

pokedata <- pokedata %>%
  clean_names()
```

### Describe the data: Pokemon

Data author: **ALBERTO BARRADAS**

<https://www.kaggle.com/datasets/abcsds/pokemon?resource=download>

Description: This is pokemon data for 721 pokemon and their stats.

How many observations (rows) are there? 800

How many variables (columns) are there? 13

### skimr: Quick overview

```{r, message=FALSE}
skim_data <- skimr::skim(pokedata)
view(skim_data)
```

### Summary: Quick overview

```{r, message=FALSE}
summary(pokedata)
```

With the summary, we can confirm what `skimr` told us: some of the data is in a class that will not be helpful for analysis.

### Class types

-   **numeric** – numbers with decimals (e.g. `3.14`, `-10.5`)

-   **integer** – whole numbers (e.g. `1`, `42`)

-   **character** – text strings (e.g. `"hello"`, `"CS201"`)

-   **logical** – Boolean values: `TRUE` or `FALSE`

-   **factor** – categorical variables with defined levels (e.g. `"low"`, `"medium"`, `"high"`)

-   **Date** – calendar dates (e.g. `as.Date("2025-09-19")`)

Let's take a closer look at changing classes below.

### Categorical vs. Continuous

Categorical variables represent discrete groups or labels (e.g., type, name), while continuous variables can take on any numeric value within a range (e.g., speed, body mass (from `penguins`)).

```{r, message=FALSE, results='hide'}
class(pokedata$number) # checks class
pokedata$number <- as.factor(pokedata$number) # converts to factor
class(pokedata$number) # check class again
summary(pokedata$number) # review the data in this variable

# the reason I am converting to factor above is because I have looked at the data and decided that I want to treat the data as categorical rather than numeric. they are numbers, but they are id numbers related to each pokemon--not ordinal, measurements, or counts, etc. 

pokedata$type_1 <- as.factor(pokedata$type_1)
class(pokedata$type_1)
summary(pokedata$type_1)

pokedata$name <- as.factor(pokedata$name)
pokedata$type_2 <- as.factor(pokedata$type_2)
pokedata$generation <- as.factor(pokedata$generation)


skim_data <- skimr::skim(pokedata)

summary(pokedata$legendary)

# here, i went ahead and converted the other variables to factor where it applies. this can be done ay anytime. you can also convert back later at any point, if you need
```

How many categorical (factor/logical) variables are there? 6

How many numeric variables are there? 7

How many legendary? 65

## Variation and Covariation

Variation refers to how the values *within* a variable can differ from one measurement to another.

Covariation describes how two variables change together; when one variable changes, the other tends to change in a specific way, either increasing or decreasing in relation to it. This is *between* variables.

Let's start by looking at the distribution of Pokemon by Special Attack (`sp_atk`) using a histogram. We'll get back to variation in a bit.

```{r, message=FALSE}
ggplot(pokedata, aes(x = sp_atk)) +
  geom_histogram(binwidth = 1)
```

**Question!** What is the difference between a histogram and a bar chart?\
Answer: Histograms is used for continuous data like speed attack while bar charts are used for categerical data like the different types of Pokemon.

```{r, message=FALSE}
ggplot(pokedata, aes(x = type_1)) + # note that type_1 is categorical
  geom_bar()
```

### Pause for exploratory questions

When you generate a visual for EDA, you should pause to see what the data is telling you, and perhaps ask yourself questions like:

-   Does your visualization match your expectations?

-   Which values are the most common? Why?

-   Which values are the least common? Why?

-   Do you see any unusual patterns? What could explain them?

## Take a closer look

Use code that you've already seen elsewhere to focus on certain "regions" of interest in your data.

```{r}
pokedata_0_100 <- pokedata |> # check it out! the new "pipe" (%>% still works, and they essentially work the same)
  filter(sp_atk <= 100)

ggplot(pokedata_0_100, aes(x = sp_atk)) +
  geom_histogram(binwidth = 1) +
  scale_x_continuous(breaks = seq(from = 0, to = 100, by = 5))
```

## Looking at outliers and unusual data

Outliers are unusual observations that don’t quite fit the overall pattern of the data. They can arise from data entry mistakes, can represent extreme values that were recorded during data collection, or can even indicate significant new discoveries.

```{r, message=FALSE}
ggplot(pokedata, aes(x = sp_atk)) + 
  geom_histogram(binwidth = 5)
```

### Zoom in using `coord_cartesian()`

Define a window to take a closer look. You can also add an `xlim()` argument.

```{r, message=FALSE}
ggplot(pokedata, aes(x = sp_atk)) + 
  geom_histogram() +
  coord_cartesian(ylim = c(0, 10), xlim = c(150, 200))
```

## Try again with `sp_def`

Let's have a look at a similar, but potentially unrelated variable, Special Defense (`sp_def`).

```{r, message=FALSE}
ggplot(pokedata, aes(x = sp_def)) + 
  geom_histogram(binwidth = 5)
```

### Zoom in using `coord_cartesian()`

```{r, message=FALSE}
ggplot(pokedata, aes(x = sp_def)) + 
  geom_histogram() +
  coord_cartesian(ylim = c(0, 20), xlim = c(150, 275))
```

## How about a scatter plot to see how they correlate?

```{r}
ggplot(pokedata, aes(x = sp_atk, y = sp_def)) + 
  geom_point()
```

## How about some boxplots?

One for `sp_atk`:

```{r message=FALSE}
atk_boxplot <- ggplot(data = pokedata, aes(x = sp_atk)) +
  geom_boxplot() +
  facet_wrap(~generation)

atk_boxplot
```

Another for `sp_def`:

```{r, message=FALSE}
def_boxplot <- ggplot(data = pokedata, aes(x = sp_def)) +
  geom_boxplot() +
  facet_wrap(~generation)

def_boxplot
```

### Question for next class:

-   How do you read a boxplot, and what are the different landmarks?

## Extra Credit!

-   Share with the class how to read a boxplot (1pt each!)

-   Find the difference(s) between \|\> and %\>% and email me (1pt)

    -   Share with the class on Wednesday, FCFS!!! (1pt)
